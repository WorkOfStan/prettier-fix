---
name: "Prettier Fix"
description: Automatically format code using Prettier and open pull requests to fix style issues for Super-Linter compatibility.

author:
  name: "Stanislav Rejthar"
  email: "rejthar@stanislavrejthar.com"
  url: "https://github.com/WorkOfStan"

branding:
  icon: "check-circle"
  color: "blue"

inputs:
  commit-changes:
    description: "If true, commit changes to the current branch"
    type: boolean
    default: false
  commit-message:
    description: "Commit message for the changes"
    type: string
    default: "chore: Prettier fixes applied automatically"
  debug:
    description: "Enable extra debug output"
    type: boolean
    default: false
  node-version:
    description: "Node.js version to use"
    type: string
    default: "20"
  prettier-config-path:
    description: "Optional path to a custom Prettier config file"
    type: string
    required: false
    default: ""
  skip-package-setup:
    description: "If true, skip npm initialization and installation"
    type: boolean
    default: false

outputs:
  branch-name:
    description: "The branch where changes were committed"
  changed-files:
    description: "Comma-separated list of files changed by Prettier"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.ref }} # Fetch latest changes (even by previous job)
        fetch-depth: 0 # Fetch all history for all branches and tags. Otherwise github.event.pull_request.base.ref SHA isn't found.

    # Fetch latest changes (even by previous job)
    - name: Fetch latest changes
      run: git pull origin ${{ github.ref }}
      shell: bash

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Handle package.json, Install dependencies, Run Prettier, and Clean up
      run: |
        CREATED_PACKAGE_JSON=false
        if [ "${{ inputs.skip-package-setup }}" != "true" ]; then
          if [ ! -f package.json ]; then
            echo "Setting up package.json..."
            npm init -y
            CREATED_PACKAGE_JSON=true
          fi
          echo "... and installing dependencies..."
          npm install
        fi

        if ! npx prettier -v > /dev/null 2>&1; then
          echo "Prettier not found. Installing temporarily..."
          npm install prettier
        fi

        echo "Running Prettier..."
        npx prettier -v
        if [ -n "${{ inputs.prettier-config-path }}" ]; then
          npx prettier --config "${{ inputs.prettier-config-path }}" --write .
        else
          npx prettier --write .
        fi

        if [ "$CREATED_PACKAGE_JSON" == "true" ]; then
          echo "Cleaning up temporary files..."
          rm -f package.json package-lock.json
          rm -rf node_modules
        fi
        # Keep in the same step to hold the context for $CREATED_PACKAGE_JSON
      shell: bash

    - name: Determine Branch Name
      id: set-branch
      run: |
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "Debug 1. List All Local Branches"
          git branch
          echo "Debug 2. List All Remote Branches"
          git branch -r
          echo "Debug 3. List All References (Including Detached HEADs)"
          git show-ref
          echo "Debug 4. Check Your Current Checked-out Reference"
          git status
        fi

        if [ "${{ inputs.commit-changes }}" == "true" ]; then
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
          if [ "$BRANCH_NAME" == "HEAD" ] || [ -z "$BRANCH_NAME" ]; then
            echo "Detached HEAD detected. Checking out the PR branch directly from origin..."
            # Fetch the PR branch tip and force a local branch matching the remote head
            # Note: ${{ github.head_ref }} is a GitHub Actions built-in variable that contains the name of the source branch of a pull request (PR).
            #   It is only available during workflow runs triggered by pull_request events.
            git fetch origin ${{ github.head_ref }} --depth=1
            git checkout -B "${{ github.head_ref }}" "origin/${{ github.head_ref }}"
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          fi

          NOTICE_MESSAGE="A Prettier commit was added to the current branch: $BRANCH_NAME"
        else
          BRANCH_NAME="prettier/fix-$(date +'%y%m%d%H%M%S')-$(git rev-parse --short HEAD)"
          git checkout -b "$BRANCH_NAME"
          NOTICE_MESSAGE="A Prettier commit was added to the new branch: $BRANCH_NAME"
        fi

        echo "Branch Determined::Using branch $BRANCH_NAME"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        echo "NOTICE_MESSAGE=$NOTICE_MESSAGE" >> $GITHUB_ENV
      shell: bash

    - name: Commit and Push Changes if Any
      id: commit-push
      run: |
        CHANGED_FILES=""
        if [ -z "$(git status --porcelain)" ]; then
          echo "No changes detected by Prettier. Exiting gracefully."
          # This sets the output named branch-name to an empty value. Which is useful to signal “no branch was created” in a way that downstream steps can detect reliably.
          echo "branch-name=" >> $GITHUB_OUTPUT
          echo "changed-files=" >> $GITHUB_OUTPUT
          exit 0
          # The rest of the script must be within the same step to really stop the execution
        fi

        # Check for changes in workflow files (unstaged changes) - to be fixed manually
        for file in .github/workflows/*.yml; do
          if git diff "$file" | grep -q .; then
            echo "::warning title=Manual change required::Changes detected in $file. Manual intervention required to avoid conflicts with Super-Linter."
            git diff "$file"
            # As the workflow files are not staged, their changes do not trigger status --porcelain, so there's no need to (reset neither) restore them
          fi
        done

        # Only add changed non-workflow files, safe for spaces
        # Why cut at -c4-? Because the first 3 characters in git status --porcelain are status indicators (like staged/unstaged/ignored), and you just want the actual file path that follows.
        if output=$(git status --porcelain | cut -c4- | grep -vE '^.github/workflows/'); then
          printf '%s\n' "$output" | while IFS= read -r file; do
            git add "$file"
          done
        else
          # no lines selected, but not a “real” error (as grep resulting in no lines ends with exit 1)
          echo "No editable changes detected by Prettier. Exiting gracefully."
          echo "branch-name=" >> $GITHUB_OUTPUT
          echo "changed-files=" >> $GITHUB_OUTPUT
          exit 0
          # The rest of the script must still be within the same step to really stop the execution
        fi

        if [ -z "${{ env.BRANCH_NAME }}" ]; then
          echo "::error title=Detached HEAD::No valid branch found, skipping commit."
          echo "branch-name=" >> $GITHUB_OUTPUT
          echo "changed-files=" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Configure Git user
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # Commit and push changes with custom message
        git commit -m "${{ inputs.commit-message }} on $(date +'%Y-%m-%d %H:%M:%S') UTC"

        echo "::notice title=Prettier commit adding::${{ env.NOTICE_MESSAGE }}"
        git push origin "${{ env.BRANCH_NAME }}"

        COMMIT_URL=${{ github.server_url }}/${{ github.repository }}/commit/$(git rev-parse HEAD)
        echo "::notice title=View the Prettier commit::${COMMIT_URL}"

        # Set outputs
        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | tr '\n' ',' | sed 's/,$//')
        echo "branch-name=${{ env.BRANCH_NAME }}" >> $GITHUB_OUTPUT
        echo "changed-files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "changed-files=${CHANGED_FILES}"
        fi
      shell: bash
